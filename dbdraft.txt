import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, FlatList, TouchableOpacity, Alert, TextInput, Platform } from 'react-native';
import Header from './components/header';
import { MaterialIcons } from '@expo/vector-icons';
import * as SQLite from 'expo-sqlite';

export default function App() {
  const [searchQuery, setSearchQuery] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [people, setPeople] = useState([]);

  const [newPersonName, setNewPersonName] = useState('');
  const [newPersonEmail, setNewPersonEmail] = useState('');
  const [newPersonPassword, setNewPersonPassword] = useState('');
  const [newPersonCPassword, setNewPersonCPassword] = useState('');

  const [isEditing, setIsEditing] = useState(false); 
  const [isAdding, setIsAdding] = useState(false); 
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const db = SQLite.openDatabase('list.db');

  const saveList = (list) => {
      db.transaction(tx => {
        tx.executeSql(
          'INSERT INTO list (name, email, password) VALUES (?, ?, ?)',
          [list.name, list.email, list.password],
          (tx, results) => {
            if (results.rowsAffected > 0) {
              console.log('Credentials saved to SQLite');
              setPeople(prevList => [...prevList, list]);
            } else {
              Alert.alert('Failed to save credentials to SQLite');
            }
          },
          error => {
            console.error(error);
          }
        );
      });
    };
    useEffect(() => {
    db.transaction(tx => {
      tx.executeSql(
        'CREATE TABLE IF NOT EXISTS list (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, email TEXT, password TEXT);'
      );
      tx.executeSql(
        'SELECT * FROM list',
        [],
        (tx, results) => {
          var temp = [];
          for (let i = 0; i < results.rows.length; ++i) {
            temp.push(results.rows.item(i));
          }
          setPeople(temp);
        }
      );
    });
  }, []);

  const deleteFromdb = (id) => {
  db.transaction(tx => {
    tx.executeSql(
      'DELETE FROM list WHERE id = ?',
      [id],
      (tx, results) => {
        console.log(results);
        if (results.rowsAffected > 0) {
          console.log('Item deleted from database');
        } else {
          Alert.alert('Failed to delete item from database');
        }
      },
      error => {
        console.error('Error executing SQL query:', error);
      }
    );
  });
};

  //login
  const handleLogin = () => {
    const inList = people.find(
      (person) => person.username === username && person.password === password
    );
    if (username === '' || password === '') {
      Alert.alert('Login failed', 'Please fill all fields.');
    } else if (username === '1' && password === '1') {
      setIsLoggedIn(true);
      setUsername('');
      setPassword('');
    } else if (inList) {
      setIsLoggedIn(true);
      setUsername('');
      setPassword('');
    } else {
      Alert.alert('Login Failed', 'Invalid username or password.');
    }
  };

  //logout
  const handleLogout = () => {
    setUsername('');
    setPassword('');
    setIsLoggedIn(false);
  };

  //search
  const handleSearchChange = (text) => {
    setSearchQuery(text);
  };

  const filteredPeople = people.filter(
    (person) =>
      person.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  //onPress
  const handlePersonPress = (person) => {
    Alert.alert(
      person.name,
      `Email: ${person.email} \nPassword: ${person.password}`,
    );
  };

  //longpress
  const handleLongPress = (person) => {
    Alert.alert(
      'Delete.',
      `Would you like to delete ${person.name}`,
      [
        {
          text: 'Yes',
          onPress: () => handleRemovePerson(person),
          style: 'destructive',
        },
        {
          text: 'No',
          style: 'cancel',
        },
      ],
      { cancelable: true }
    );
  };

  //email validation
  const validateEmail = (email) => {
    let reg = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w\w+)+$/;
    return reg.test(email);
  };

  //add item
  const handleAddPerson = () => {
    if (newPersonName === '' || newPersonEmail === '' || newPersonPassword === '' || newPersonCPassword === '') {
      Alert.alert('Error', 'Please fill in all fields.');
    } else if (newPersonPassword !== newPersonCPassword) {
      Alert.alert('Error', 'Passwords do not match.');
    } else if (!validateEmail(newPersonEmail)) {
      Alert.alert('Error', 'Please enter a valid email address.');
      return;
    } else {
      const newItem = { name: newPersonName, email: newPersonEmail, password: newPersonPassword };
      saveList(newItem); // Save to SQLite database
      setUsername(newPersonEmail);
      setPassword(newPersonPassword);
      setIsAdding(false);
      setNewPersonName('');
      setNewPersonEmail('');
      setNewPersonPassword('');
      setNewPersonCPassword('');
    }
  };
  //remove item
  const handleRemovePerson = (person) => {
    deleteFromdb(person.id);
    setPeople((prevPeople) => prevPeople.filter((p) => p.id !== person.id));
    showToast('Item deleted!');
  };
  
  //cancel button
  const handleCancel = () => {
    setIsEditing(false); 
  };

  //notif in every move
  const showToast = (message) => {
    alert(message);
  };

   if (!isLoggedIn) {
    return (
      <View style={styles.loginContainer}>
      <Header/>
      <View style={styles.formRow}>
      <Text style={styles.loginHeader}>Login</Text>
        <Text style={styles.text2}>Email</Text>
        <View style={styles.inputContainer}>
        <MaterialIcons name="email" size={24} color="black" style={styles.icon} />
        <TextInput
          style={styles.loginInput}
          placeholder="Email"
          value={username}
          onChangeText={setUsername}
        />
        </View>
        <Text style={styles.text2}>Password</Text>
        <View style={styles.inputContainer}>
        <MaterialIcons name="lock" size={24} color="black" style={styles.icon} />
          <TextInput
            style={[styles.loginInput, styles.passwordInput]}
            placeholder="Password"
            value={password}
            onChangeText={text => setPassword(text)}
            secureTextEntry={!showPassword}
          />
          <MaterialIcons 
              name={showPassword ? 'visibility' : 'visibility-off'}
              size={24}
              color="black"
              style={styles.eyeIcon}
              onPress={() => setShowPassword(!showPassword)}
            />
        </View>
        <TouchableOpacity onPress={handleLogin} style={styles.loginButton}>
          <MaterialIcons name="login" size={24} color="white" style={styles.loginIcon} />
          <Text style={styles.loginButtonText}>Login</Text>
        </TouchableOpacity>
      </View>
      </View>
    );
  }

   return (
    <View style={styles.outerContainer}>
      <Header/>
      <View style={styles.container}>
        {!isEditing && (
          <View style={{ flex: 1 }}>
            {!isAdding && (
              <View style={{ flex: 1 }}>
                <View style={styles.searchRow}>
                  <MaterialIcons name="search" size={24} color="black" style={styles.icon} />
                    <TextInput
                      style={styles.search}
                      placeholder="Search"
                      placeholderTextColor="black"
                      value={searchQuery}
                      onChangeText={handleSearchChange}
                    />
                </View>
                <FlatList
                  data={filteredPeople}
                  renderItem={({ item }) => (
                    <TouchableOpacity 
                      onPress={() => handlePersonPress(item)}
                      onLongPress={() => handleLongPress(item)} 
                      style={styles.card}>
                      <Text style={styles.person}>{item.name}</Text>
                    </TouchableOpacity>
                  )}
                />
                <View style={styles.buttonContainer}>
                    <View style={styles.buttonRow}>
                      <TouchableOpacity
                        onPress={() => setIsAdding(true)}
                        style={[styles.button, { flex: 1 }]}> 
                        <MaterialIcons name="add" size={24} color="white" style={styles.buttonIcon} />
                        <Text style={styles.buttonText}>Add</Text>
                      </TouchableOpacity>
                      <TouchableOpacity
                        onPress={() => {handleLogout(true)}}
                        style={[styles.button, { flex: 1 }]}>
                        <MaterialIcons name="logout" size={24} color="white" style={styles.buttonIcon} />
                        <Text style={styles.buttonText}>Logout</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
              </View>
            )}
            {isAdding && (
              <View>
                <Text style={styles.header}>Add Person</Text>
                <View style={styles.formRow}>
                  <Text style={styles.text2}>Name</Text>
                  <View style={styles.inputContainer}>
                    <MaterialIcons name="person" size={24} color="black" style={styles.icon} />
                    <TextInput
                      style={styles.input2}
                      placeholder="Name"
                      value={newPersonName}
                      onChangeText={(text) => setNewPersonName(text)}
                    />
                  </View>
                  <Text style={styles.text2}>Email</Text>
                  <View style={styles.inputContainer}>
                  <MaterialIcons name="email" size={24} color="black" style={styles.icon} />
                  <TextInput
                    style={styles.input2}
                    placeholder="Email"
                    value={newPersonEmail}
                    onChangeText={(text) => setNewPersonEmail(text)}
                  />
                  </View>
                  <Text style={styles.text2}>Password</Text>
                  <View style={styles.inputContainer}>
                  <MaterialIcons name="lock" size={24} color="black" style={styles.icon} />
                  <TextInput
                    style={styles.input2}
                    placeholder="Password"
                    value={newPersonPassword}
                    onChangeText={(text) => setNewPersonPassword(text)}
                  />
                  </View>
                  <Text style={styles.text2}>Confirm Password</Text>
                  <View style={styles.inputContainer}>
                  <MaterialIcons name="lock" size={24} color="black" style={styles.icon} />
                  <TextInput
                    style={styles.input2}
                    placeholder="Confirm Password"
                    value={newPersonCPassword}
                    onChangeText={(text) => setNewPersonCPassword(text)}
                  />
                  </View>
                  <View style={styles.buttonRow}>  
                    <TouchableOpacity
                      onPress={handleAddPerson}
                      style={[styles.button, { flex: 1 }]}>
                      <MaterialIcons name="save" size={24} color="white" style={styles.buttonIcon} />
                      <Text style={styles.buttonText}>Save</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      onPress={() => setIsAdding(false)}
                      style={[styles.button, { flex: 1 }]}>
                      <MaterialIcons name="cancel" size={24} color="white" style={styles.buttonIcon} />
                      <Text style={styles.buttonText}>Cancel</Text>
                    </TouchableOpacity>
                  </View>  
                </View>
              </View>
            )}
          </View>
        )}
      </View>
    </View>
  );
}


const styles = StyleSheet.create({
  outerContainer: {
    flex: 1,
    backgroundColor: '#F8F8F8',
    paddingTop: 100,
    paddingBottom: 20,
    paddingHorizontal: 10,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
  },
  loginContainer: {
    flex: 1,
    backgroundColor: '#F8F8F8',
    justifyContent: 'center',
    paddingBottom: 20,
    paddingHorizontal: 10,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
  },
  loginHeader: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  loginButton: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#333',
    borderRadius: 5,
    padding: 10,
    marginTop: 20,
  },
  loginIcon: {
    marginRight: 5,
  },
  loginButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  loginInput: {
    flex: 1,
  },
  searchRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
    justifyContent: 'center',
    marginStart: 5,
    borderWidth: 1,
    margin: 10,
    borderColor: '#777',
    borderRadius: 5,
    padding: 5,
  },
  search: {
    borderColor: '#777',
    paddingVertical: 8,
    flex: 1,
    borderRadius: 5,
    color: '#333',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    margin: 10,
    borderWidth: 1,
    borderColor: '#777',
    borderRadius: 5,
    padding: 8,
  },
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
    borderRadius: 10,
    padding: 10,
  },
  person: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  card: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 8,
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  formRow: {
    flexDirection: 'column',
    justifyContent: 'space-between',
    alignItems: 'left',
    marginBottom: 10,
    padding: 10,
    borderColor: '#888888',
    borderWidth:1,
  },
  header: {
    fontSize: 20,
    textAlign: 'Left',
    fontWeight: 'bold',
    color: '#333',
  },
  input2: {
    flex: 1,
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
    alignContent: 'justify',
    alignSelf: 'stretch',
  },
  buttonContainer: {
    flexDirection: 'column',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
    padding: 10,
    borderColor: '#888888',
    alignContent: 'justify',
  },
  passwordInput: {
    flex: 1,
  },
  eyeIcon: {
    position: 'absolute',
    right: 20,
  },
  icon: {
    marginRight: 10,
  },
  text2: {
    fontSize: 14,
    textAlign: 'Left',
    marginLeft: 10,
    fontWeight: 'bold',
    color: '#333',
  },
  button: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'stretch',
    backgroundColor: '#333',
    borderRadius: 5,
    padding: 10,
    marginRight: 10,
  },
  buttonIcon: {
    marginRight: 5,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
});